/* automatically generated by rust-bindgen */

// bindgen command line:
// bindgen --use-core --no-layout-tests --ctypes-prefix=cty ../../cmsis_freertos_stm32h7/Drivers/CMSIS/RTOS2/Include/os_tick.h -o os_tick.rs

//pub const __WORDSIZE: u32 = 64;
//pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
//pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
//pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
//pub const __DARWIN_UNIX03: u32 = 1;
//pub const __DARWIN_64_BIT_INO_T: u32 = 1;
//pub const __DARWIN_VERS_1050: u32 = 1;
//pub const __DARWIN_NON_CANCELABLE: u32 = 0;
//pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
//pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
//pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
//pub const __DARWIN_C_ANSI: u32 = 4096;
//pub const __DARWIN_C_FULL: u32 = 900000;
//pub const __DARWIN_C_LEVEL: u32 = 900000;
//pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
//pub const __DARWIN_NO_LONG_LONG: u32 = 0;
//pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
//pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
//pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
//pub const __PTHREAD_SIZE__: u32 = 8176;
//pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
//pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
//pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
//pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
//pub const __PTHREAD_COND_SIZE__: u32 = 40;
//pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
//pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
//pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
//pub const INT8_MAX: u32 = 127;
//pub const INT16_MAX: u32 = 32767;
//pub const INT32_MAX: u32 = 2147483647;
//pub const INT64_MAX: u64 = 9223372036854775807;
//pub const INT8_MIN: i32 = -128;
//pub const INT16_MIN: i32 = -32768;
//pub const INT32_MIN: i32 = -2147483648;
//pub const INT64_MIN: i64 = -9223372036854775808;
//pub const UINT8_MAX: u32 = 255;
//pub const UINT16_MAX: u32 = 65535;
//pub const UINT32_MAX: u32 = 4294967295;
//pub const UINT64_MAX: i32 = -1;
//pub const INT_LEAST8_MIN: i32 = -128;
//pub const INT_LEAST16_MIN: i32 = -32768;
//pub const INT_LEAST32_MIN: i32 = -2147483648;
//pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
//pub const INT_LEAST8_MAX: u32 = 127;
//pub const INT_LEAST16_MAX: u32 = 32767;
//pub const INT_LEAST32_MAX: u32 = 2147483647;
//pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
//pub const UINT_LEAST8_MAX: u32 = 255;
//pub const UINT_LEAST16_MAX: u32 = 65535;
//pub const UINT_LEAST32_MAX: u32 = 4294967295;
//pub const UINT_LEAST64_MAX: i32 = -1;
//pub const INT_FAST8_MIN: i32 = -128;
//pub const INT_FAST16_MIN: i32 = -32768;
//pub const INT_FAST32_MIN: i32 = -2147483648;
//pub const INT_FAST64_MIN: i64 = -9223372036854775808;
//pub const INT_FAST8_MAX: u32 = 127;
//pub const INT_FAST16_MAX: u32 = 32767;
//pub const INT_FAST32_MAX: u32 = 2147483647;
//pub const INT_FAST64_MAX: u64 = 9223372036854775807;
//pub const UINT_FAST8_MAX: u32 = 255;
//pub const UINT_FAST16_MAX: u32 = 65535;
//pub const UINT_FAST32_MAX: u32 = 4294967295;
//pub const UINT_FAST64_MAX: i32 = -1;
//pub const INTPTR_MAX: u64 = 9223372036854775807;
//pub const INTPTR_MIN: i64 = -9223372036854775808;
//pub const UINTPTR_MAX: i32 = -1;
//pub const INTMAX_MIN: i64 = -9223372036854775808;
//pub const INTMAX_MAX: u64 = 9223372036854775807;
//pub const UINTMAX_MAX: i32 = -1;
//pub const PTRDIFF_MIN: i64 = -9223372036854775808;
//pub const PTRDIFF_MAX: u64 = 9223372036854775807;
//pub const SIZE_MAX: i32 = -1;
//pub const RSIZE_MAX: i32 = -1;
//pub const WINT_MIN: i32 = -2147483648;
//pub const WINT_MAX: u32 = 2147483647;
//pub const SIG_ATOMIC_MIN: i32 = -2147483648;
//pub const SIG_ATOMIC_MAX: u32 = 2147483647;
//pub type int_least8_t = i8;
//pub type int_least16_t = i16;
//pub type int_least32_t = i32;
//pub type int_least64_t = i64;
//pub type uint_least8_t = u8;
//pub type uint_least16_t = u16;
//pub type uint_least32_t = u32;
//pub type uint_least64_t = u64;
//pub type int_fast8_t = i8;
//pub type int_fast16_t = i16;
//pub type int_fast32_t = i32;
//pub type int_fast64_t = i64;
//pub type uint_fast8_t = u8;
//pub type uint_fast16_t = u16;
//pub type uint_fast32_t = u32;
//pub type uint_fast64_t = u64;
//pub type __int8_t = cty::c_schar;
//pub type __uint8_t = cty::c_uchar;
//pub type __int16_t = cty::c_short;
//pub type __uint16_t = cty::c_ushort;
//pub type __int32_t = cty::c_int;
//pub type __uint32_t = cty::c_uint;
//pub type __int64_t = cty::c_longlong;
//pub type __uint64_t = cty::c_ulonglong;
//pub type __darwin_intptr_t = cty::c_long;
//pub type __darwin_natural_t = cty::c_uint;
//pub type __darwin_ct_rune_t = cty::c_int;
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub union __mbstate_t {
//    pub __mbstate8: [cty::c_char; 128usize],
//    pub _mbstateL: cty::c_longlong,
//    _bindgen_union_align: [u64; 16usize],
//}
//pub type __darwin_mbstate_t = __mbstate_t;
//pub type __darwin_ptrdiff_t = cty::c_long;
//pub type __darwin_size_t = cty::c_ulong;
//pub type __darwin_va_list = __builtin_va_list;
//pub type __darwin_wchar_t = cty::c_int;
//pub type __darwin_rune_t = __darwin_wchar_t;
//pub type __darwin_wint_t = cty::c_int;
//pub type __darwin_clock_t = cty::c_ulong;
//pub type __darwin_socklen_t = __uint32_t;
//pub type __darwin_ssize_t = cty::c_long;
//pub type __darwin_time_t = cty::c_long;
//pub type __darwin_blkcnt_t = __int64_t;
//pub type __darwin_blksize_t = __int32_t;
//pub type __darwin_dev_t = __int32_t;
//pub type __darwin_fsblkcnt_t = cty::c_uint;
//pub type __darwin_fsfilcnt_t = cty::c_uint;
//pub type __darwin_gid_t = __uint32_t;
//pub type __darwin_id_t = __uint32_t;
//pub type __darwin_ino64_t = __uint64_t;
//pub type __darwin_ino_t = __darwin_ino64_t;
//pub type __darwin_mach_port_name_t = __darwin_natural_t;
//pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
//pub type __darwin_mode_t = __uint16_t;
//pub type __darwin_off_t = __int64_t;
//pub type __darwin_pid_t = __int32_t;
//pub type __darwin_sigset_t = __uint32_t;
//pub type __darwin_suseconds_t = __int32_t;
//pub type __darwin_uid_t = __uint32_t;
//pub type __darwin_useconds_t = __uint32_t;
//pub type __darwin_uuid_t = [cty::c_uchar; 16usize];
//pub type __darwin_uuid_string_t = [cty::c_char; 37usize];
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct __darwin_pthread_handler_rec {
//    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
//    pub __arg: *mut cty::c_void,
//    pub __next: *mut __darwin_pthread_handler_rec,
//}
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub struct _opaque_pthread_attr_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 56usize],
//}
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub struct _opaque_pthread_cond_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 40usize],
//}
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct _opaque_pthread_condattr_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 8usize],
//}
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub struct _opaque_pthread_mutex_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 56usize],
//}
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct _opaque_pthread_mutexattr_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 8usize],
//}
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct _opaque_pthread_once_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 8usize],
//}
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub struct _opaque_pthread_rwlock_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 192usize],
//}
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct _opaque_pthread_rwlockattr_t {
//    pub __sig: cty::c_long,
//    pub __opaque: [cty::c_char; 16usize],
//}
//#[repr(C)]
//#[derive(Copy, Clone)]
//pub struct _opaque_pthread_t {
//    pub __sig: cty::c_long,
//    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
//    pub __opaque: [cty::c_char; 8176usize],
//}
//pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
//pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
//pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
//pub type __darwin_pthread_key_t = cty::c_ulong;
//pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
//pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
//pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
//pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
//pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
//pub type __darwin_pthread_t = *mut _opaque_pthread_t;
//pub type u_int8_t = cty::c_uchar;
//pub type u_int16_t = cty::c_ushort;
//pub type u_int32_t = cty::c_uint;
//pub type u_int64_t = cty::c_ulonglong;
//pub type register_t = i64;
//pub type user_addr_t = u_int64_t;
//pub type user_size_t = u_int64_t;
//pub type user_ssize_t = i64;
//pub type user_long_t = i64;
//pub type user_ulong_t = u_int64_t;
//pub type user_time_t = i64;
//pub type user_off_t = i64;
//pub type syscall_arg_t = u_int64_t;
//pub type intmax_t = cty::c_long;
//pub type uintmax_t = cty::c_ulong;


pub type IRQHandler_t = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[doc = " Setup OS Tick timer to generate periodic RTOS Kernel Ticks"]
    #[doc = " \\param[in]     freq         tick frequency in Hz"]
    #[doc = " \\param[in]     handler      tick IRQ handler"]
    #[doc = " \\return 0 on success, -1 on error."]
    pub fn OS_Tick_Setup(freq: u32, handler: IRQHandler_t) -> i32;
}
extern "C" {
    #[doc = " Enable OS Tick timer interrupt"]
    pub fn OS_Tick_Enable();
}
extern "C" {
    #[doc = " Disable OS Tick timer interrupt"]
    pub fn OS_Tick_Disable();
}
extern "C" {
    #[doc = " Acknowledge execution of OS Tick timer interrupt"]
    pub fn OS_Tick_AcknowledgeIRQ();
}
extern "C" {
    #[doc = " Get OS Tick timer IRQ number"]
    #[doc = " \\return OS Tick IRQ number"]
    pub fn OS_Tick_GetIRQn() -> i32;
}
extern "C" {
    #[doc = " Get OS Tick timer clock frequency"]
    #[doc = " \\return OS Tick timer clock frequency in Hz"]
    pub fn OS_Tick_GetClock() -> u32;
}
extern "C" {
    #[doc = " Get OS Tick timer interval reload value"]
    #[doc = " \\return OS Tick timer interval reload value"]
    pub fn OS_Tick_GetInterval() -> u32;
}
extern "C" {
    #[doc = " Get OS Tick timer counter value"]
    #[doc = " \\return OS Tick timer counter value"]
    pub fn OS_Tick_GetCount() -> u32;
}
extern "C" {
    #[doc = " Get OS Tick timer overflow status"]
    #[doc = " \\return OS Tick overflow status (1 - overflow, 0 - no overflow)."]
    pub fn OS_Tick_GetOverflow() -> u32;
}
//pub type __builtin_va_list = [__va_list_tag; 1usize];
//#[repr(C)]
//#[derive(Debug, Copy, Clone)]
//pub struct __va_list_tag {
//    pub gp_offset: cty::c_uint,
//    pub fp_offset: cty::c_uint,
//    pub overflow_arg_area: *mut cty::c_void,
//    pub reg_save_area: *mut cty::c_void,
//}
